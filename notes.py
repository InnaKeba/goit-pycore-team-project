"""–ú–æ–¥—É–ª—å notes.py –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –Ω–æ—Ç–∞—Ç–∫–∞–º–∏.
–ú—ñ—Å—Ç–∏—Ç—å –∫–ª–∞—Å–∏ NotesName, NoteText, TagNotes, NoteRecord —Ç–∞ NotesBook –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –Ω–æ—Ç–∞—Ç–∫–∞–º–∏.
–¢–∞–∫–æ–∂ –º—ñ—Å—Ç–∏—Ç—å —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è, –≤–∏–¥–∞–ª–µ–Ω–Ω—è, —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–∞ –ø–æ—à—É–∫—É –Ω–æ—Ç–∞—Ç–æ–∫.
"""

from collections import UserDict
import textwrap # –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –Ω–æ—Ç–∞—Ç–æ–∫, –ø–µ—Ä–µ–Ω–æ—Å—É —Ç–µ–∫—Å—Ç–∞ 
import json # –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–æ—Ç–∞—Ç–æ–∫ —É —Ñ–∞–π–ª

class Field: #–±–∞–∑–æ–≤–∏–π –∫–ª–∞—Å –¥–ª—è –ø–æ–ª—ñ–≤ –Ω–æ—Ç–∞—Ç–∫–∏
    def __init__(self, value):
        self.value = value

    def __str__(self):
        return str(self.value)


class NotesName(Field): # –∫–ª–∞—Å –¥–ª—è –Ω–∞–∑–≤–∏ –Ω–æ—Ç–∞—Ç–∫–∏
    def __init__(self, value):
        if not value or not isinstance(value, str):
            raise ValueError("–ù–∞–∑–≤–∞ –Ω–æ—Ç–∞—Ç–∫–∏ –º–∞—î –±—É—Ç–∏ –Ω–µ–ø–æ—Ä–æ–∂–Ω—ñ–º —Ä—è–¥–∫–æ–º.")
        super().__init__(value)

class NoteText(Field): # –∫–ª–∞—Å –¥–ª—è —Ç–µ–∫—Å—Ç—É –Ω–æ—Ç–∞—Ç–∫
    def __init__(self, value):
        if not value or not isinstance(value, str):
            raise ValueError("–¢–µ–∫—Å—Ç –Ω–æ—Ç–∞—Ç–∫–∏ –º–∞—î –±—É—Ç–∏ –Ω–µ–ø–æ—Ä–æ–∂–Ω—ñ–º —Ä—è–¥–∫–æ–º.")
        super().__init__(value)


class TagNotes(Field): # –∫–ª–∞—Å –¥–ª—è —Ç–µ–≥—ñ–≤ –Ω–æ—Ç–∞—Ç–æ–∫
    def __init__(self, value):
        if value and not isinstance(value, str):
            raise ValueError("–¢–µ–≥ –º–∞—î –±—É—Ç–∏ —Ä—è–¥–∫–æ–º.")
        if value and ',' in value:
            raise ValueError("–ú–æ–∂–Ω–∞ –≤–≤–µ—Å—Ç–∏ –ª–∏—à–µ –æ–¥–∏–Ω —Ç–µ–≥ –±–µ–∑ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫—ñ–≤.")
        super().__init__(value)

class NoteRecord: # –∫–ª–∞—Å –¥–ª—è –∑–∞–ø–∏—Å—É –Ω–æ—Ç–∞—Ç–∫–∏
    def __init__(self, name, text, tag=None):
        self.name = NotesName(name)
        self.text = NoteText(text)
        self.tag = TagNotes(tag) if tag else None

    def __str__(self): # –º–µ—Ç–æ–¥ –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è –Ω–æ—Ç–∞—Ç–∫–∏ —É –∑—Ä—É—á–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ
        tag_display = f" [tag: {self.tag.value}]" if self.tag else ""
        return f"üìå Note: {self.name.value}\n{textwrap.fill(self.text.value, width=50)}{tag_display}\n"
    
    def to_dict(self): 
        """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–ª–æ–≤–Ω–∏–∫ –¥–ª—è JSON-—Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó."""
        return {
            "name": self.name.value,
            "text": self.text.value,
            "tag": self.tag.value if self.tag else None
        }

    @classmethod # –∫–ª–∞—Å–æ–≤–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞ –∑ —Å–ª–æ–≤–Ω–∏–∫–∞
    def from_dict(cls, data):
        """–°—Ç–≤–æ—Ä—é—î –µ–∫–∑–µ–º–ø–ª—è—Ä NoteRecord —ñ–∑ —Å–ª–æ–≤–Ω–∏–∫–∞."""
        return cls(data["name"], data["text"], data.get("tag"))


class NotesBook(UserDict): # –∫–ª–∞—Å –¥–ª—è –∫–Ω–∏–≥–∏ –Ω–æ—Ç–∞—Ç–æ–∫, —â–æ –Ω–∞—Å–ª—ñ–¥—É—î UserDict
    def add_note(self, record: NoteRecord): # –∫–ª–∞—Å –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ—Ç–∞—Ç–∫–∏
        self.data[record.name.value] = record

    def delete_note(self, name): # –∫–ª–∞—Å –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–æ—Ç–∞—Ç–∫–∏
        if name in self.data:
            del self.data[name]
            return True
        return False

    def search_by_name(self, name): # –∫–ª–∞—Å –¥–ª—è –ø–æ—à—É–∫—É –Ω–æ—Ç–∞—Ç–∫–∏ –∑–∞ –Ω–∞–∑–≤–æ—é
        return [note for key, note in self.data.items() if name.lower() in key.lower()]

    def search_by_text(self, text): # –∫–ª–∞—Å –¥–ª—è –ø–æ—à—É–∫—É –Ω–æ—Ç–∞—Ç–∫–∏ –∑–∞ —Ç–µ–∫—Å—Ç–æ–º
        return [note for note in self.data.values() if text.lower() in note.text.value.lower()]

    def search_by_tag(self, tag): # –∫–ª–∞—Å –¥–ª—è –ø–æ—à—É–∫—É –Ω–æ—Ç–∞—Ç–∫–∏ –∑–∞ —Ç–µ–≥–æ–º
        return [note for note in self.data.values() if note.tag and tag.lower() == note.tag.value.lower()]

    def get_all_notes(self): # –∫–ª–∞—Å –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –Ω–æ—Ç–∞—Ç–æ–∫
        return list(self.data.values())
    
    def to_list(self): # –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î –Ω–æ—Ç–∞—Ç–∫–∏ —É —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É JSON
        return [record.to_dict() for record in self.data.values()]

    def save(self, filename="notes.json"): # –ó–±–µ—Ä—ñ–≥–∞—î –Ω–æ—Ç–∞—Ç–∫–∏ —É JSON-—Ñ–∞–π–ª
        with open(filename, "w", encoding="utf-8") as f:
            json.dump(self.to_list(), f, ensure_ascii=False, indent=2)

    def load(self, filename="notes.json"): # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –Ω–æ—Ç–∞—Ç–∫–∏ –∑ JSON-—Ñ–∞–π–ª—É
        try:
            with open(filename, "r", encoding="utf-8") as f:
                notes_list = json.load(f)
            for note_data in notes_list:
                record = NoteRecord.from_dict(note_data)
                self.add_note(record)
        except FileNotFoundError:
            pass  # –§–∞–π–ª —É–ø–µ—Ä—à–µ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚Äî –ø—Ä–∞—Ü—é—î–º–æ –∑ –ø–æ—Ä–æ–∂–Ω—å–æ—é –∫–Ω–∏–≥–æ—é
