"""–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –Ω–æ—Ç–∞—Ç–∫–∞–º–∏. –í–∫–ª—é—á–∞—î –∫–ª–∞—Å–∏ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è, –≤–∏–¥–∞–ª–µ–Ω–Ω—è, –ø–æ—à—É–∫—É —Ç–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è –Ω–æ—Ç–∞—Ç–æ–∫.
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î UserDict –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –Ω–æ—Ç–∞—Ç–æ–∫ —Ç–∞ –∑–∞–±–µ–∑–ø–µ—á—É—î –∑—Ä—É—á–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –Ω–∏–º–∏. """
from notes import NotesBook, NoteRecord
import textwrap

def input_error(func): # –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫ –≤–≤–µ–¥–µ–Ω–Ω—è
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            return f"–ü–æ–º–∏–ª–∫–∞: {str(e)}"
    return wrapper

def parse_input(user_input):
    # 1) –í–∏–¥–∞–ª—è—î–º–æ –ø—Ä–æ–±—ñ–ª–∏ —Å–ø–µ—Ä–µ–¥—É/–∑–∑–∞–¥—É
    # 2) –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ —Å–ª–æ–≤–∞
    cmd, *args = user_input.strip().split()
    # 3) –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ–º–∞–Ω–¥—É —É –Ω–∏–∂–Ω—å–æ–º—É —Ä–µ–≥—ñ—Å—Ç—Ä—ñ —Ç–∞ —Ä–µ—à—Ç—É —Å–ª—ñ–≤ —è–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–∏
    return cmd.lower(), args

@input_error
def add_note(args, book: NotesBook): # –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ—Ç–∞—Ç–∫–∏
    name = args[0] 
    text = " ".join(args[1:-1]) if len(args) > 2 else args[1] # —è–∫—â–æ —Ç–µ–≥ —î, —Ç–æ –±–µ—Ä–µ–º–æ –π–æ–≥–æ —è–∫ –æ—Å—Ç–∞–Ω–Ω—ñ–π –∞—Ä–≥—É–º–µ–Ω—Ç
    tag = args[-1] if len(args) > 2 else None # —è–∫—â–æ —Ç–µ–≥ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ, —Ç–æ None
    record = NoteRecord(name, text, tag) 
    book.add_note(record)
    return f"–ù–æ—Ç–∞—Ç–∫—É '{name}' –¥–æ–¥–∞–Ω–æ."


@input_error
def delete_note(args, book: NotesBook): # –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–æ—Ç–∞—Ç–∫–∏
    name = args[0] 
    if book.delete_note(name):  
        return f"–ù–æ—Ç–∞—Ç–∫—É '{name}' –≤–∏–¥–∞–ª–µ–Ω–æ." 
    return f"–û–π-–π–æ–π, –Ω–æ—Ç–∞—Ç–∫—É '{name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üò¢"

@input_error
def edit_name(args, book: NotesBook): # –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ –Ω–æ—Ç–∞—Ç–∫–∏
    if len(args) < 2:
        raise ValueError("–í–∫–∞–∂–∏ —Å—Ç–∞—Ä—É —Ç–∞ –Ω–æ–≤—É –Ω–∞–∑–≤—É –Ω–æ—Ç–∞—Ç–∫–∏.\n–ü—Ä–∏–∫–ª–∞–¥: edit_name [—Å—Ç–∞—Ä–∞ –Ω–∞–∑–≤–∞] [–Ω–æ–≤–∞ –Ω–∞–∑–≤–∞]")

    old_name, new_name = args[0], args[1]

    if old_name not in book.data:
        return f"–û–π-–π–æ–π, –Ω–æ—Ç–∞—Ç–∫—É –∑ –Ω–∞–∑–≤–æ—é '{old_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üò¢"

    note = book.data.pop(old_name)
    note.name.value = new_name
    book.data[new_name] = note
    return f"–ù–∞–∑–≤—É –Ω–æ—Ç–∞—Ç–∫–∏ –∑–º—ñ–Ω–µ–Ω–æ –∑ '{old_name}' –Ω–∞ '{new_name}'."

@input_error
def edit_text(args, book: NotesBook): # –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –Ω–æ—Ç–∞—Ç–∫–∏
    if len(args) < 2:
        raise ValueError("–í–∫–∞–∂–∏ –Ω–∞–∑–≤—É –Ω–æ—Ç–∞—Ç–∫–∏ —Ç–∞ –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç.\n–ü—Ä–∏–∫–ª–∞–¥: edit_text [–Ω–∞–∑–≤–∞] [–Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç]")

    name = args[0]
    new_text = " ".join(args[1:])

    if name not in book.data:
        return f"–û–π-–π–æ–π, –Ω–æ—Ç–∞—Ç–∫—É '{name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üò¢"

    book.data[name].text.value = new_text
    return f"–¢–µ–∫—Å—Ç –Ω–æ—Ç–∞—Ç–∫–∏ '{name}' —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ."

@input_error
def show_notes(book: NotesBook): # –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è –≤—Å—ñ—Ö –Ω–æ—Ç–∞—Ç–æ–∫
    notes = book.get_all_notes()
    if not notes:
        return "–ö–Ω–∏–≥–∞ –Ω–æ—Ç–∞—Ç–æ–∫ –ø–æ—Ä–æ–∂–Ω—è."
    return "\n".join(str(note) for note in notes)


@input_error
def search_note(args, book: NotesBook): # –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ—à—É–∫—É –Ω–æ—Ç–∞—Ç–∫–∏ –∑–∞ –Ω–∞–∑–≤–æ—é
    keyword = " ".join(args)
    results = book.search_by_name(keyword)
    return "\n".join(str(note) for note in results) if results else "–û–π-–π–æ–π, —à–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ ü§∑‚Äç‚ôÄÔ∏è. –ù–æ—Ç–∞—Ç–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."


@input_error
def search_note_text(args, book: NotesBook):    # –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ—à—É–∫—É –Ω–æ—Ç–∞—Ç–∫–∏ –∑–∞ —Ç–µ–∫—Å—Ç–æ–º
    keyword = " ".join(args)
    results = book.search_by_text(keyword)
    return "\n".join(str(note) for note in results) if results else "–û–π-–π–æ–π, —à–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ ü§∑‚Äç‚ôÄÔ∏è.–ù–æ—Ç–∞—Ç–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ —Ç–µ–∫—Å—Ç–æ–º."


@input_error
def search_tag(args, book: NotesBook): # –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ—à—É–∫—É –Ω–æ—Ç–∞—Ç–∫–∏ –∑–∞ —Ç–µ–≥–æ–º
    keyword = args[0]
    results = book.search_by_tag(keyword)
    return "\n".join(str(note) for note in results) if results else "–û–π-–π–æ–π, —à–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ ü§∑‚Äç‚ôÄÔ∏è.–ù–æ—Ç–∞—Ç–∫–∏ –∑ —Ç–∞–∫–∏–º —Ç–µ–≥–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."

def show_help(): # –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è –¥–æ–≤—ñ–¥–∫–∏ –∑ –¥–æ—Å—Ç—É–ø–Ω–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
    return """
 –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ Notes:

‚Ä¢ help                             ‚Äì –ø–æ–∫–∞–∑–∞—Ç–∏ –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
‚Ä¢ add [–Ω–∞–∑–≤–∞] [—Ç–µ–∫—Å—Ç] [—Ç–µ–≥]        ‚Äì –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤—É –Ω–æ—Ç–∞—Ç–∫—É
‚Ä¢ edit_name [—Å—Ç–∞—Ä–∞] [–Ω–æ–≤–∞ –Ω–∞–∑–≤–∞]   ‚Äì –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞–∑–≤—É –Ω–æ—Ç–∞—Ç–∫–∏
‚Ä¢ edit_text [–Ω–∞–∑–≤–∞] [–Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç]  ‚Äì –∑–º—ñ–Ω–∏—Ç–∏ —Ç–µ–∫—Å—Ç –Ω–æ—Ç–∞—Ç–∫–∏
‚Ä¢ all                              ‚Äì –ø–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –Ω–æ—Ç–∞—Ç–∫–∏
‚Ä¢ delete [–Ω–∞–∑–≤–∞]                   ‚Äì –≤–∏–¥–∞–ª–∏—Ç–∏ –Ω–æ—Ç–∞—Ç–∫—É –∑–∞ –Ω–∞–∑–≤–æ—é
‚Ä¢ search [—á–∞—Å—Ç–∏–Ω–∞ –Ω–∞–∑–≤–∏]           ‚Äì –ø–æ—à—É–∫ –∑–∞ –Ω–∞–∑–≤–æ—é –Ω–æ—Ç–∞—Ç–∫–∏
‚Ä¢ search_notes [–∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ]     ‚Äì –ø–æ—à—É–∫ –∑–∞ —Ç–µ–∫—Å—Ç–æ–º –Ω–æ—Ç–∞—Ç–∫–∏
‚Ä¢ search_tag [—Ç–µ–≥]                 ‚Äì –ø–æ—à—É–∫ –∑–∞ —Ç–µ–≥–æ–º –Ω–æ—Ç–∞—Ç–∫–∏
‚Ä¢ back                             ‚Äì –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –º–µ–Ω—é
‚Ä¢ exit / close                     ‚Äì –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–±–æ—Ç—É
"""
def main():
    book = NotesBook() 
    book.load() # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–æ—Ç–∞—Ç–∫–∏ –∑ —Ñ–∞–π–ª—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É
    print("üëã –í—ñ—Ç–∞—î–º–æ –≤ –±–ª–æ–∫–Ω–æ—Ç—ñ Notes üêç –≤—ñ–¥ Snaky sisters!")
    print("üí° –î–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –≤—Å—å–æ–≥–æ –ø–µ—Ä–µ–ª—ñ–∫—É –∫–æ–º–∞–Ω–¥ –≤–≤–µ–¥—ñ—Ç—å: help")

    while True:
        user_input = input("--> ")
        command, args = parse_input(user_input)

        match command:
            case "add":
                print(add_note(args, book))
                book.save() # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ—Ç–∞—Ç–∫–∏ –ø—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è
            case "delete":
                print(delete_note(args, book))
                book.save() # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ—Ç–∞—Ç–∫–∏ –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        
            case "edit_name": # –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ –Ω–æ—Ç–∞—Ç–∫–∏
                print(edit_name(args, book))
                book.save()

            case "edit_text": # –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –Ω–æ—Ç–∞—Ç–∫–∏
                print(edit_text(args, book))
                book.save()

            case "search":
                print(search_note(args, book))
            case "search_notes":
                print(search_note_text(args, book))
            case "search_tag":
                print(search_tag(args, book))
            case "all":
                print(show_notes(book))
            case "back":
                print("I'll be back ‚Ü© –ê–ª–µ –ø–æ–∫–∏ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –≤ —Å—Ç–∞—Ä—Ç–æ–≤–µ –º–µ–Ω—é.")
                break
            case "exit" | "close":
                print("üëã –î—è–∫—É—î–º–æ –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–ª–æ–∫–Ω–æ—Ç—É Notes! –î–æ –Ω–æ–≤–∏—Ö –∑—É—Å—Ç—Ä—ñ—á–µ–π! üêç")
                break
            case "help":
                print(show_help())
            case _:
                print("üò≥ –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∞. –ú–æ–∂–ª–∏–≤–æ, —Ç–∏ –≤–∏–Ω–∞–π—à–ª–∞(-–æ–≤) –Ω–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ—é? –í–≤–µ–¥–∏ help –¥–ª—è —Å–ø–∏—Å–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ üòÖ")
           

if __name__ == "__main__":
    main()
